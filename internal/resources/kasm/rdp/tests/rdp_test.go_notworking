package tests

import (
	"fmt"
	"os"
	"testing"
	"time"
	"math/rand"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"terraform-provider-kasm/testutils"
)

func generateUniqueUsername() string {
	// Use timestamp and random number to ensure uniqueness
	timestamp := time.Now().Unix()
	randomNum := rand.Intn(10000)
	return fmt.Sprintf("testuser_%d_%d", timestamp, randomNum)
}

func TestAccKasmRDP_Basic(t *testing.T) {
	username := generateUniqueUsername()

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testutils.TestAccPreCheck(t) },
		ProtoV6ProviderFactories: testutils.TestAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccKasmRDPConfig_basic(username),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttrSet("kasm_session.test", "id"),
					resource.TestCheckResourceAttrSet("kasm_session.test", "rdp_connection_file"),
				),
			},
		},
	})
}

func testAccKasmRDPConfig_basic(username string) string {
	return fmt.Sprintf(`
provider "kasm" {
    base_url = "%s"
    api_key = "%s"
    api_secret = "%s"
    insecure = true
}

resource "kasm_user" "test" {
    username = "%s"
    password = "TestPassword123!"
    first_name = "Test"
    last_name = "User"
    organization = "Test Org"
    locked = false
    disabled = false
    groups = []
}

data "kasm_images" "available" {
    depends_on = [kasm_user.test]
}

output "available_images" {
    value = data.kasm_images.available.images
}

resource "kasm_session" "test" {
    image_id = data.kasm_images.available.images[0].image_id
    user_id = kasm_user.test.id
    rdp_enabled = true
}
`, os.Getenv("KASM_BASE_URL"), os.Getenv("KASM_API_KEY"), os.Getenv("KASM_API_SECRET"), username)
}

func TestAccKasmRDP_FileType(t *testing.T) {
	username := generateUniqueUsername()

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testutils.TestAccPreCheck(t) },
		ProtoV6ProviderFactories: testutils.TestAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccKasmRDPConfig_fileType(username),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttrSet("kasm_session.test", "id"),
					resource.TestCheckResourceAttrSet("kasm_session.test", "rdp_connection_file"),
				),
			},
		},
	})
}

func testAccKasmRDPConfig_fileType(username string) string {
	return fmt.Sprintf(`
provider "kasm" {
    base_url = "%s"
    api_key = "%s"
    api_secret = "%s"
    insecure = true
}

resource "kasm_user" "test" {
    username = "%s"
    password = "TestPassword123!"
    first_name = "Test"
    last_name = "User"
    organization = "Test Org"
    locked = false
    disabled = false
    groups = []
}

data "kasm_images" "available" {
    depends_on = [kasm_user.test]
}

output "available_images" {
    value = data.kasm_images.available.images
}

resource "kasm_session" "test" {
    image_id = data.kasm_images.available.images[0].image_id
    user_id = kasm_user.test.id
    rdp_enabled = true
}
`, os.Getenv("KASM_BASE_URL"), os.Getenv("KASM_API_KEY"), os.Getenv("KASM_API_SECRET"), username)
}

func TestAccKasmRDP_URLType(t *testing.T) {
	username := generateUniqueUsername()

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testutils.TestAccPreCheck(t) },
		ProtoV6ProviderFactories: testutils.TestAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccKasmRDPConfig_urlType(username),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttrSet("kasm_session.test", "id"),
					resource.TestCheckResourceAttrSet("kasm_session.test", "rdp_connection_file"),
				),
			},
		},
	})
}

func testAccKasmRDPConfig_urlType(username string) string {
	return fmt.Sprintf(`
provider "kasm" {
    base_url = "%s"
    api_key = "%s"
    api_secret = "%s"
    insecure = true
}

resource "kasm_user" "test" {
    username = "%s"
    password = "TestPassword123!"
    first_name = "Test"
    last_name = "User"
    organization = "Test Org"
    locked = false
    disabled = false
    groups = []
}

data "kasm_images" "available" {
    depends_on = [kasm_user.test]
}

output "available_images" {
    value = data.kasm_images.available.images
}

resource "kasm_session" "test" {
    image_id = data.kasm_images.available.images[0].image_id
    user_id = kasm_user.test.id
    rdp_enabled = true
}
`, os.Getenv("KASM_BASE_URL"), os.Getenv("KASM_API_KEY"), os.Getenv("KASM_API_SECRET"), username)
}
